{"version":3,"sources":["types/ShowErrors.ts","components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","api/comments.ts","components/UserSelector.tsx","api/users.ts","App.tsx","api/posts.ts","index.tsx"],"names":["ShowError","PostsList","posts","selectedPost","savePost","showPostDetail","setShowPostDetail","className","map","post","id","title","type","classNames","onClick","event","buttonText","currentTarget","textContent","request","url","delay","data","options","method","body","JSON","stringify","headers","Promise","resolve","setTimeout","then","fetch","response","json","client","Loader","NewCommentForm","createComment","useState","name","setName","nameError","setNameError","email","setEmail","emailError","setEmailError","comment","setComment","commentError","setCommentError","loading","setLoading","htmlFor","placeholder","value","onChange","target","preventDefault","PostDetails","loader","setLoader","error","setError","showWritingComments","setShowWritingComments","showFormComment","setShowFormComment","comments","setComments","useEffect","postID","newComments","length","commentsWarning","catch","finally","href","commentId","filter","deleteCommentOnServer","postId","createCommentOnServer","newComment","UserSelector","users","selectedUser","saveSelectedUser","isActive","setIsActive","role","user","index","usersFromServer","App","setUsers","setSelectedUser","setPosts","setSelectedPost","setPostDetail","newUsers","userID","newPosts","postWarning","PostsLoadingError","NoPostsYet","show","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58d520db.chunk.js","sourcesContent":["export const enum ShowError {\n  error = 'Something went wrong!',\n  postWarning = 'No posts yet',\n  commentsWarning = 'No comments yet',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Prop = {\n  posts: Post[],\n  selectedPost: Post | null,\n  savePost: (post: Post) => void,\n  showPostDetail: boolean,\n  setShowPostDetail: (show: boolean) => void,\n};\n\nexport const PostsList: React.FC<Prop> = ({\n  posts,\n  selectedPost,\n  savePost,\n  showPostDetail,\n  setShowPostDetail,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n              <td data-cy=\"PostTitle\">{post.title}</td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    {\n                      'is-light': post.id === selectedPost?.id,\n                    },\n                  )}\n                  onClick={(event) => {\n                    savePost(post);\n\n                    const buttonText = event.currentTarget.textContent;\n\n                    if (buttonText === 'Close' && showPostDetail) {\n                      setShowPostDetail(false);\n                    } else {\n                      setShowPostDetail(true);\n                    }\n                  }}\n                >\n                  {showPostDetail\n                  && post.id === selectedPost?.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Prop = {\n  createComment: (name: string, email: string, comment: string) => void,\n};\n\nexport const NewCommentForm: React.FC<Prop> = ({ createComment }) => {\n  const [name, setName] = useState<string | null>(null);\n  const [nameError, setNameError] = useState(false);\n  const [email, setEmail] = useState<string | null>(null);\n  const [emailError, setEmailError] = useState(false);\n  const [comment, setComment] = useState<string | null>(null);\n  const [commentError, setCommentError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handlerSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (!name) {\n      setNameError(true);\n    }\n\n    if (!email) {\n      setEmailError(true);\n    }\n\n    if (!comment) {\n      setCommentError(true);\n    }\n\n    if (nameError || emailError || commentError) {\n      return;\n    }\n\n    setLoading(true);\n    if (name && email && comment) {\n      createComment(name, email, comment);\n    }\n\n    setLoading(false);\n    setComment(null);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': nameError },\n            )}\n            value={name ?? ''}\n            onChange={(event) => {\n              setName(event.target.value);\n              setNameError(false);\n            }}\n          />\n\n          {nameError\n            ? (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )\n            : (\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n            ) }\n        </div>\n\n        {nameError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': emailError },\n            )}\n            value={email ?? ''}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setEmailError(false);\n            }}\n          />\n\n          {emailError\n            ? (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )\n            : (\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n            ) }\n        </div>\n\n        {emailError\n        && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': commentError },\n            )}\n            value={comment ?? ''}\n            onChange={(event) => {\n              setComment(event.target.value);\n              setCommentError(false);\n            }}\n          />\n        </div>\n\n        {commentError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button',\n              'is-link',\n              { 'is-loading': loading },\n            )}\n            onClick={handlerSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={() => {\n              setNameError(false);\n              setEmailError(false);\n              setCommentError(false);\n            }}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { ShowError } from '../types/ShowErrors';\nimport {\n  commentsFromServer,\n  createCommentOnServer,\n  deleteCommentOnServer,\n} from '../api/comments';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Prop = {\n  selectedPost: Post,\n};\n\nexport const PostDetails: React.FC<Prop> = ({ selectedPost }) => {\n  const [loader, setLoader] = useState(false);\n  const [error, setError] = useState<ShowError | null>(null);\n  const [showWritingComments, setShowWritingComments] = useState(true);\n  const [showFormComment, setShowFormComment] = useState(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const createComment = (name: string, email: string, comment: string) => {\n    createCommentOnServer(selectedPost.id, name, email, comment)\n      .then(newComment => setComments([...comments, newComment]))\n      .catch(() => setError(ShowError.error))\n      .finally(() => {\n\n      });\n  };\n\n  const deleteComment = (commentId: number) => {\n    setComments(comments.filter(comment => comment.id !== commentId));\n  };\n\n  useEffect(() => {\n    setShowWritingComments(true);\n    setShowFormComment(false);\n\n    setError(null);\n    setLoader(true);\n\n    commentsFromServer(selectedPost.id)\n      .then(newComments => {\n        if (newComments.length === 0) {\n          setError(ShowError.commentsWarning);\n        }\n\n        setComments(newComments);\n      })\n      .catch(() => setError(ShowError.error))\n      .finally(() => setLoader(false));\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${selectedPost.id}: ${selectedPost.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {selectedPost.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {loader && <Loader />}\n\n        {error\n          && error === ShowError.error\n          && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              {error}\n            </div>\n          )}\n\n        {error\n          && error === ShowError.commentsWarning\n          && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              {error}\n            </p>\n          )}\n\n        {!error && <p className=\"title is-4\">Comments:</p>}\n\n        {comments.map(comment => (\n          <article\n            key={selectedPost.id + comment.id}\n            className=\"message is-small\"\n            data-cy=\"Comment\"\n          >\n            <div className=\"message-header\">\n              <a href={`${comment.email}`} data-cy=\"CommentAuthor\">\n                {comment.name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => {\n                  deleteComment(comment.id);\n                  deleteCommentOnServer(comment.id);\n                }}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {comment.body}\n            </div>\n          </article>\n        ))}\n\n        {showWritingComments\n          && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => {\n                setShowWritingComments(false);\n                setShowFormComment(true);\n              }}\n            >\n              Write a comment\n            </button>\n          )}\n\n        {showFormComment && <NewCommentForm createComment={createComment} />}\n\n      </div>\n    </div>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const commentsFromServer = (postID: number) => client\n  .get<Comment[]>(`/comments?postId=${postID}`);\nexport const createCommentOnServer = (\n  postId: number,\n  name: string,\n  email: string,\n  comment: string,\n) => client\n  .post<Comment>('/comments', {\n  postId,\n  name,\n  email,\n  body: comment,\n});\n\nexport const deleteCommentOnServer = (commentId: number) => client\n  .delete(`/comments/${commentId}`);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Prop = {\n  users: User[],\n  selectedUser: User | null,\n  saveSelectedUser: (user: User) => void,\n};\n\nexport const UserSelector: React.FC<Prop> = ({\n  users,\n  selectedUser,\n  saveSelectedUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>Choose a user</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user, index) => (\n            <a\n              key={user.id}\n              href={`#user-${index}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': user.id === selectedUser?.id },\n              )}\n              onClick={() => {\n                saveSelectedUser(user);\n                setIsActive(false);\n              }}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const usersFromServer = client\n  .get<User[]>('/users');\n// export const createTodoOnServer = (title: string) => client\n//   .post<User>('/todos', {\n//   title,\n//   userId: USER_ID,\n//   completed: false,\n// });\n// export const deleteTodoOnServer = (todoId: number) => client\n//   .delete(`/todos/${todoId}`);\n// export const toggleTodoOnServer = (todoId: number, completed: boolean) => client\n//   .patch<User>(`/todos/${todoId}`, { completed: !completed });\n// export const updateTodoOnServer = (todoId: number, title: string) => client\n//   .patch<User>(`/todos/${todoId}`, { title });\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { usersFromServer } from './api/users';\nimport { Post } from './types/Post';\nimport { postsFromServer } from './api/posts';\nimport { ShowError } from './types/ShowErrors';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [error, setError] = useState<ShowError | null>(null);\n  const [loader, setLoader] = useState(false);\n  const [showPostDetail, setPostDetail] = useState(false);\n\n  const saveUser = (user: User) => setSelectedUser(user);\n  const savePost = (post: Post) => setSelectedPost(post);\n  const setShowPostDetail = (show: boolean) => setPostDetail(show);\n\n  useEffect(() => {\n    usersFromServer\n      .then(newUsers => setUsers(newUsers));\n  }, []);\n  useEffect(() => {\n    setPostDetail(false);\n    setError(null);\n\n    if (selectedUser) {\n      setLoader(true);\n\n      postsFromServer(selectedUser.id)\n        .then(newPosts => {\n          if (newPosts.length === 0) {\n            setError(ShowError.postWarning);\n          }\n\n          setPosts(newPosts);\n        })\n        .catch(() => setError(ShowError.error))\n        .finally(() => setLoader(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  saveSelectedUser={saveUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                <p data-cy=\"NoSelectedUser\">\n                  {selectedUser\n                    ? selectedUser.name\n                    : 'No user selected'}\n                </p>\n\n                {loader && <Loader />}\n\n                {error && (\n                  <div\n                    className={classNames(\n                      'notification',\n                      {\n                        'is-danger': error === ShowError.error,\n                        'is-warning': error === ShowError.postWarning,\n                      },\n                    )}\n                    data-cy={classNames(\n                      {\n                        PostsLoadingError: error === ShowError.error,\n                        NoPostsYet: error === ShowError.postWarning,\n                      },\n                    )}\n                  >\n                    {error}\n                  </div>\n                )}\n\n                {posts.length > 0\n                && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    savePost={savePost}\n                    showPostDetail={showPostDetail}\n                    setShowPostDetail={setShowPostDetail}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': showPostDetail,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && showPostDetail\n              && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const postsFromServer = (userID: number) => client\n  .get<Post[]>(`/posts?userId=${userID}`);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}